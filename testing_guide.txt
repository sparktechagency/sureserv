# SureServ Backend Comprehensive Testing Guide

This guide provides a step-by-step process to test all implemented features using Postman.
Replace all placeholder IDs (e.g., YOUR_USER_ID, YOUR_SERVICE_ID) with actual IDs from your database.
Most routes require authentication. Ensure you have a valid JWT token and include it in the 'Authorization: Bearer <token>' header.

---

## 1. Authentication

### 1.1. Login User

*   **Purpose:** Obtain a JWT token for authenticated requests.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/auth/login`
*   **Body (JSON):**
    ```json
    {
      "email": "user@example.com",
      "password": "password123"
    }
    ```
*   **Notes:** Use credentials of an existing user (customer or provider). Save the returned token.

### 1.2. Update User Password

*   **Purpose:** Change a user's password.
*   **Method:** `PATCH`
*   **URL:** `http://localhost:3000/api/v1/auth/YOUR_USER_ID/password`
*   **Body (JSON):**
    ```json
    {
      "oldPassword": "oldpassword123",
      "newPassword": "newsecurepassword"
    }
    ```
*   **Notes:** Requires authentication. `YOUR_USER_ID` should be the ID of the authenticated user.

### 1.3. Forgot Password

*   **Purpose:** Request a password reset email.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/auth/forgot-password`
*   **Body (JSON):**
    ```json
    {
      "email": "user@example.com"
    }
    ```

### 1.4. Reset Password

*   **Purpose:** Reset a user's password with a token.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/auth/reset-password`
*   **Body (JSON):**
    ```json
    {
      "token": "RESET_TOKEN_FROM_EMAIL",
      "password": "newsecurepassword"
    }
    ```

### 1.5. Verify Phone Number (for logged-in user)

*   **Purpose:** Verify the OTP sent to a logged-in user's phone.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/auth/verify-otp`
*   **Body (JSON):**
    ```json
    {
      "otp": "123456"
    }
    ```
*   **Notes:** Requires authentication. The user ID is automatically detected from the token.

### 1.6. Resend OTP

*   **Purpose:** Resend an OTP to a user.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/auth/resend-otp`
*   **Body (JSON):**
    ```json
    {
      "email": "user@example.com"
    }
    ```

### 1.7. Logout User

*   **Purpose:** Invalidate the current user session.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/auth/logout`
*   **Notes:** Requires authentication.

---

## 2. Customer Management

### 2.1. Get All Customers

*   **Purpose:** Retrieve a list of all customer accounts.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/customers`
*   **Notes:** Requires authentication and `admin` role.

### 2.2. Get Customer by ID

*   **Purpose:** Retrieve details of a specific customer.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/customers/YOUR_CUSTOMER_USER_ID`
*   **Notes:** Requires authentication. Can retrieve own profile or if `admin`.

### 2.3. Create a New Customer

*   **Purpose:** Register a new customer account.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/customers`
*   **Body (JSON):**
    ```json
    {
      "name": "New Customer",
      "email": "new.customer@example.com",
      "password": "securepassword",
      "phone": "1234567890"
    }
    ```
*   **Notes:** No authentication needed. This will return a `userId`. You will need this for the next step.



### 2.5. Update Customer Details

*   **Purpose:** Modify details of an existing customer.
*   **Method:** `PUT`
*   **URL:** `http://localhost:3000/api/v1/customers/YOUR_CUSTOMER_USER_ID`
*   **Body (Form-Data):**
    *   `name`: `Updated Customer Name`
    *   `phone`: `0987654321`
    *   `profilePic`: (file)
*   **Notes:** Requires authentication. Can update own profile.

### 2.6. Delete a Customer

*   **Purpose:** Remove a customer account.
*   **Method:** `DELETE`
*   **URL:** `http://localhost:3000/api/v1/customers/YOUR_CUSTOMER_USER_ID`
*   **Notes:** Requires authentication and `admin` role.

---

## 3. Provider Management

### 3.1. Get All Providers

*   **Purpose:** Retrieve a list of all provider accounts.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/providers`

### 3.2. Get Provider by ID

*   **Purpose:** Retrieve details of a specific provider, including their saved addresses.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/providers/YOUR_PROVIDER_USER_ID`

### 3.3. Create a New Provider

*   **Purpose:** Register a new provider account. A token is returned immediately for instant login.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/providers`
*   **Body (Form-Data):**
    *   `name`: `New Provider`
    *   `email`: `new.provider@example.com`
    *   `password`: `securepassword`
    *   `phone`: `1122334455`
    *   `profilePic`: (file)
    *   `nid`: (file)
    *   `license`: (file)
    *   `addressprof`: (file)
*   **Notes:** No authentication needed. The response will include a `userId` and a `token`.

### 3.4. Update Provider Details

*   **Purpose:** Modify details of an existing provider.
*   **Method:** `PUT`
*   **URL:** `http://localhost:3000/api/v1/providers/YOUR_PROVIDER_USER_ID`
*   **Body (Form-Data):**
    *   `phone`: `5544332211`
    *   `profilePic`: (file)
    *   `nid`: (file)
    *   `license`: (file)
    *   `addressprof`: (file)
*   **Notes:** Requires authentication. Provider can update their own profile.

### 3.5. Delete a Provider

*   **Purpose:** Remove a provider account.
*   **Method:** `DELETE`
*   **URL:** `http://localhost:3000/api/v1/providers/YOUR_PROVIDER_USER_ID`
*   **Notes:** Requires authentication and `admin` role.

### 3.6. Get Provider Daily Earnings

*   **Purpose:** View a provider's earnings for the current day.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/providers/YOUR_PROVIDER_USER_ID/earnings/daily`
*   **Notes:** Requires authentication.

### 3.7. Get Provider Monthly Earnings

*   **Purpose:** View a provider's earnings for the current month.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/providers/YOUR_PROVIDER_USER_ID/earnings/monthly`
*   **Notes:** Requires authentication.

### 3.8. Set Provider Active Status

*   **Purpose:** Change a provider's active status.
*   **Method:** `PUT`
*   **URL:** `http://localhost:3000/api/v1/providers/YOUR_PROVIDER_USER_ID/status`
*   **Body (JSON):**
    ```json
    {
      "activeStatus": false
    }
    ```
*   **Notes:** Requires authentication. Set to `true` or `false`.

---

## 4. Address Management

### 4.1. Get All Addresses for a User

*   **Purpose:** Retrieve all addresses associated with a specific user (customer or provider).
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/addresses/YOUR_USER_ID/getAllAddresses`
*   **Notes:** Requires authentication.

### 4.2. Get a Single Address by ID

*   **Purpose:** Retrieve details of a specific address.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/addresses/YOUR_ADDRESS_ID`
*   **Notes:** Requires authentication.

### 4.3. Create a New Address for a User

*   **Purpose:** Add a new address for a user.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/addresses/YOUR_USER_ID/`
*   **Body (JSON):**
    ```json
    {
      "street": "123 Main St",
      "city": "Anytown",
      "state": "CA",
      "zipCode": "90210",
      "country": "USA",
      "isDefault": true
    }
    ```
*   **Notes:** Requires authentication.

### 4.4. Update an Address by ID

*   **Purpose:** Modify details of an existing address.
*   **Method:** `PATCH`
*   **URL:** `http://localhost:3000/api/v1/addresses/YOUR_ADDRESS_ID`
*   **Body (JSON):**
    ```json
    {
      "street": "456 Oak Ave",
      "isDefault": false
    }
    ```
*   **Notes:** Requires authentication.

### 4.5. Delete an Address by ID

*   **Purpose:** Remove an address.
*   **Method:** `DELETE`
*   **URL:** `http://localhost:3000/api/v1/addresses/YOUR_ADDRESS_ID`
*   **Notes:** Requires authentication.

---

## 5. Service Management

### 5.1. Get All Services

*   **Purpose:** Retrieve a list of all services. Can be filtered by `providerId` (e.g., `?providerId=YOUR_PROVIDER_ID`).
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/services`

### 5.2. Get My Services (Provider Only)

*   **Purpose:** Retrieve a list of all services created by the logged-in provider.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/services/me`
*   **Notes:** Requires authentication and `provider` role.

### 5.3. Get Service by ID

*   **Purpose:** Retrieve details of a specific service.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/services/YOUR_SERVICE_ID`

### 5.3. Create a New Service

*   **Purpose:** Add a new service offered by the currently logged-in provider.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/services`
*   **Body (Form-Data):**
    *   `serviceName`: `Electrical Wiring Installation`
    *   `yearsOfExperience`: `8`
    *   `description`: `Professional electrical wiring installation for residential and commercial properties.`
    *   `price`: `120`
    *   `serviceImage`: (file)
    *   `address`: `"123 Main St, Anytown, USA"`
*   **Notes:** Requires authentication and `provider` role. The service will be automatically associated with the logged-in provider.

### 5.4. Update a Service

*   **Purpose:** Modify details of an existing service.
*   **Method:** `PATCH`
*   **URL:** `http://localhost:3000/api/v1/services/YOUR_SERVICE_ID`
*   **Body (JSON):**
    ```json
    {
      "price": 150,
      "description": "Updated description for electrical wiring.",
      "address": "456 Oak Ave, Anytown, USA"
    }
    ```
*   **Notes:** Requires authentication and `provider` role. Only the provider who owns the service can update it.

### 5.5. Delete a Service

*   **Purpose:** Remove a service.
*   **Method:** `DELETE`
*   **URL:** `http://localhost:3000/api/v1/services/YOUR_SERVICE_ID`
*   **Notes:** Requires authentication and `provider` role. Only the provider who owns the service can delete it.

---

## 6. Booking Management

### 6.1. Get All Bookings

*   **Purpose:** Retrieve a list of all bookings.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/bookings`
*   **Notes:** Requires authentication.

### 6.2. Get a Single Booking

*   **Purpose:** Retrieve details of a specific booking.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/bookings/YOUR_BOOKING_ID`
*   **Notes:** Requires authentication.

### 6.3. Get Unpaid Bookings

*   **Purpose:** Retrieve a list of all unpaid bookings.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/bookings/unpaid`
*   **Notes:** Requires authentication.

### 6.4. Get Bookings by User

*   **Purpose:** Retrieve a list of all bookings for the logged-in user, optionally filtered by status.
*   **Method:** `GET`
*   **URL:**
    *   To get all bookings for the user: `http://localhost:3000/api/v1/bookings/user`
    *   To get bookings by status: `http://localhost:3000/api/v1/bookings/user?status=upcoming`
*   **Notes:** Requires authentication. The user ID is automatically detected from the token. Valid statuses for filtering are `active`, `upcoming`, `completed`, `cancelled`.

## 6. Order and Booking Management

### 6.1. Create a New Order

*   **Purpose:** Create a new order with multiple services from potentially multiple providers.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/orders`
*   **Body (JSON):**
    ```json
    {
      "customerId": "YOUR_CUSTOMER_USER_ID",
      "serviceIds": [
        "SERVICE_ID_FROM_PROVIDER_A",
        "SERVICE_ID_FROM_PROVIDER_B"
      ],
      "date": "2025-09-15T10:00:00.000Z",
      "timeSlot": "10:00 AM - 12:00 PM",
      "description": "Fix the leaky kitchen sink and replace the light fixture.",
      "address": "YOUR_ADDRESS_ID"
    }
    ```
*   **Notes:** The backend will create a parent `Order` and individual `Booking` documents for each provider. The response will contain the new `Order` object, which includes the details of the nested bookings and the calculated `totalAmount`.

### 6.2. Get All Bookings

*   **Purpose:** Retrieve a list of all bookings.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/bookings`
*   **Notes:** Requires authentication.

### 6.3. Get a Single Booking

*   **Purpose:** Retrieve details of a specific booking.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/bookings/YOUR_BOOKING_ID`
*   **Notes:** Requires authentication.

### 6.4. Get Unpaid Bookings

*   **Purpose:** Retrieve a list of all unpaid bookings.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/bookings/unpaid`
*   **Notes:** Requires authentication.

### 6.5. Get Bookings by User

*   **Purpose:** Retrieve a list of all bookings for a specific user.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/bookings/user`
*   **Notes:** Requires authentication.

### 6.6. Update a Booking

*   **Purpose:** Modify details of an existing booking (e.g., update status).
*   **Method:** `PUT`
*   **URL:** `http://localhost:3000/api/v1/bookings/YOUR_BOOKING_ID`
*   **Body (JSON):**
    ```json
    {
      "status": "completed"
    }
    ```
*   **Notes:** Requires authentication. Valid statuses are `active`, `upcoming`, `completed`, `cancelled`.

### 6.7. Delete a Booking

*   **Purpose:** Remove a booking.
*   **Method:** `DELETE`
*   **URL:** `http://localhost:3000/api/v1/bookings/YOUR_BOOKING_ID`
*   **Notes:** Requires authentication.

### 6.6. Update a Booking

*   **Purpose:** Modify details of an existing booking (e.g., update status).
*   **Method:** `PUT`
*   **URL:** `http://localhost:3000/api/v1/bookings/YOUR_BOOKING_ID`
*   **Body (JSON):**
    ```json
    {
      "status": "completed"
    }
    ```
*   **Notes:** Requires authentication.

### 6.7. Delete a Booking

*   **Purpose:** Remove a booking.
*   **Method:** `DELETE`
*   **URL:** `http://localhost:3000/api/v1/bookings/YOUR_BOOKING_ID`
*   **Notes:** Requires authentication.

---

## 7. Payment Integration (Stripe)

### 7.1. Create Checkout Session

*   **Purpose:** Initiate a Stripe payment session.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/payments/create-checkout-session`
*   **Body (JSON):**
    ```json
    {
      "bookingId": "YOUR_BOOKING_ID"
    }
    ```
*   **Notes:**
    *   Ensure `FRONTEND_URL` in your `.env` is set correctly (e.g., `https://your-ngrok-subdomain.ngrok-free.app`).
    *   The response will contain a `sessionId`. Open the Stripe Checkout URL (`https://checkout.stripe.com/pay/cs_test_...`) in your browser.
    *   Use Stripe test cards (e.g., `4242...4242`) to complete the payment.

### 7.2. Webhook Endpoint

*   **Purpose:** This endpoint receives payment confirmations from Stripe.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/payments/webhook`
*   **Notes:**
    *   This endpoint is called by Stripe, not directly by your frontend.
    *   **Setup for Local Testing (ngrok/Stripe CLI):**
        1.  Start ngrok: `ngrok http 3000` (copy the HTTPS URL).
        2.  Update `FRONTEND_URL` in `.env` to your ngrok HTTPS URL.
        3.  Configure Stripe Webhook in your Stripe Dashboard:
            *   Endpoint URL: `https://your-ngrok-subdomain.ngrok-free.app/api/v1/payments/webhook`
            *   Events: `checkout.session.completed`
            *   Copy the `whsec_...` signing secret to `STRIPE_WEBHOOK_SECRET` in your `.env`.
        4.  Restart your Node.js server.
    *   **Action:** Complete the payment on the Stripe Checkout page (from 7.1).
    *   **Verification:** Your server's console should log "Booking updated:" and the booking's `paymentStatus` will change to "paid".

---

## 8. Review System

### 8.1. Get All Reviews

*   **Purpose:** Retrieve all reviews. Can be filtered by service.
*   **Method:** `GET`
*   **URL:** 
    *   To get all reviews: `http://localhost:3000/api/v1/reviews`
    *   To get reviews for a specific service: `http://localhost:3000/api/v1/reviews?service=YOUR_SERVICE_ID`
*   **Notes:** When fetching by service, the response will include the customer's name and the full address from the associated booking. The review creation timestamp (`createdAt`) is included in the response for the frontend to format.

### 8.2. Get Single Review

*   **Purpose:** Retrieve details of a specific review.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/reviews/YOUR_REVIEW_ID`

### 8.3. Create a Review

*   **Purpose:** Submit a review for a specific service within a completed booking.
*   **Method:** `POST`
*   **URL:** `http://localhost:3000/api/v1/reviews`
*   **Body (JSON):**
    ```json
    {
      "bookingId": "YOUR_COMPLETED_BOOKING_ID",
      "serviceId": "THE_SERVICE_ID_YOU_WANT_TO_REVIEW",
      "rating": 5,
      "comment": "Outstanding service! Very professional and efficient."
    }
    ```
*   **Notes:**
    *   Requires authentication (customer user).
    *   The booking status must be `completed`.
    *   You can submit multiple reviews for the same booking, but each review must be for a different service within that booking.

### 8.4. Update Review

*   **Purpose:** Modify an existing review.
*   **Method:** `PUT`
*   **URL:** `http://localhost:3000/api/v1/reviews/YOUR_REVIEW_ID`
*   **Body (JSON):**
    ```json
    {
      "rating": 4,
      "comment": "Good service, but could be a bit faster."
    }
    ```
*   **Notes:** Requires authentication. Only the customer who created the review can update it.

### 8.5. Delete Review

*   **Purpose:** Remove a review.
*   **Method:** `DELETE`
*   **URL:** `http://localhost:3000/api/v1/reviews/YOUR_REVIEW_ID`
*   **Notes:** Requires authentication. Only the customer who created the review can delete it.

---

## 9. Notification Management

### 9.1. Get My Notifications

*   **Purpose:** Retrieve notifications for the authenticated user.
*   **Method:** `GET`
*   **URL:** `http://localhost:3000/api/v1/notifications/me`
*   **Notes:** Requires authentication.

### 9.2. Mark Notification as Read

*   **Purpose:** Mark a notification as read.
*   **Method:** `PATCH`
*   **URL:** `http://localhost:3000/api/v1/notifications/YOUR_NOTIFICATION_ID/read`
*   **Notes:** Requires authentication.